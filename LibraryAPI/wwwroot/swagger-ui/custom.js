// –ö–∞—Å—Ç–æ–º–Ω—ã–π JavaScript –¥–ª—è Swagger UI —Å JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π

window.addEventListener('load', function() {
    console.log('Swagger UI JWT Enhancement loaded');
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UI –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    function enhanceAuthUI() {
        // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const authorizeBtn = document.querySelector('.btn.authorize');
        if (authorizeBtn) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∑–∞–º–∫–∞
            if (!authorizeBtn.querySelector('.lock-icon')) {
                const lockIcon = document.createElement('span');
                lockIcon.className = 'lock-icon';
                lockIcon.innerHTML = 'üîí ';
                authorizeBtn.insertBefore(lockIcon, authorizeBtn.firstChild);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            const isAuthorized = authorizeBtn.classList.contains('unlocked');
            if (isAuthorized) {
                authorizeBtn.innerHTML = 'üîì –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω';
                authorizeBtn.style.backgroundColor = '#28a745';
            } else {
                authorizeBtn.innerHTML = 'üîí –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è';
                authorizeBtn.style.backgroundColor = '#dc3545';
            }
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∫ –ø–æ–ª—è–º —Ç–æ–∫–µ–Ω–∞
    function enhanceTokenInput() {
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.type === 'childList') {
                    // –ò—â–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞
                    const tokenInput = document.querySelector('.auth-container input[type="text"]');
                    if (tokenInput && !tokenInput.hasAttribute('data-enhanced')) {
                        tokenInput.setAttribute('data-enhanced', 'true');
                        tokenInput.placeholder = '–í—Å—Ç–∞–≤—å—Ç–µ JWT —Ç–æ–∫–µ–Ω –∑–¥–µ—Å—å (–±–µ–∑ "Bearer")';
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–∞
                        tokenInput.addEventListener('input', function() {
                            const token = this.value.trim();
                            const isValidJWT = isValidJWTFormat(token);
                            
                            if (token.length > 0) {
                                if (isValidJWT) {
                                    this.style.borderColor = '#28a745';
                                    this.style.backgroundColor = '#f8fff9';
                                } else {
                                    this.style.borderColor = '#dc3545';
                                    this.style.backgroundColor = '#fff8f8';
                                }
                            } else {
                                this.style.borderColor = '#ced4da';
                                this.style.backgroundColor = 'white';
                            }
                        });
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞
                        const clearBtn = document.createElement('button');
                        clearBtn.type = 'button';
                        clearBtn.innerHTML = 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å';
                        clearBtn.className = 'btn btn-sm btn-outline-secondary';
                        clearBtn.style.marginTop = '5px';
                        clearBtn.onclick = function() {
                            tokenInput.value = '';
                            tokenInput.style.borderColor = '#ced4da';
                            tokenInput.style.backgroundColor = 'white';
                        };
                        
                        if (!tokenInput.parentNode.querySelector('.clear-token-btn')) {
                            clearBtn.className += ' clear-token-btn';
                            tokenInput.parentNode.appendChild(clearBtn);
                        }
                    }
                }
            });
        });
        
        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ JWT —Ç–æ–∫–µ–Ω–∞
    function isValidJWTFormat(token) {
        if (!token || typeof token !== 'string') return false;
        
        const parts = token.split('.');
        if (parts.length !== 3) return false;
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥–∞—è —á–∞—Å—Ç—å —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º base64
            parts.forEach(part => {
                if (part.length === 0) throw new Error('Empty part');
                // –î–æ–±–∞–≤–ª—è–µ–º padding –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                const padded = part + '='.repeat((4 - part.length % 4) % 4);
                atob(padded.replace(/-/g, '+').replace(/_/g, '/'));
            });
            return true;
        } catch (e) {
            return false;
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
    function addTokenInfo() {
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.type === 'childList') {
                    const authContainer = document.querySelector('.auth-container');
                    if (authContainer && !authContainer.querySelector('.token-info')) {
                        const tokenInfo = document.createElement('div');
                        tokenInfo.className = 'token-info';
                        tokenInfo.innerHTML = `
                            <div style="background-color: #e7f3ff; border: 1px solid #b3d9ff; border-radius: 4px; padding: 10px; margin: 10px 0; font-size: 12px;">
                                <strong>üí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω:</strong><br>
                                1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ POST –∑–∞–ø—Ä–æ—Å –∫ <code>/auth/login</code><br>
                                2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ <code>accessToken</code> –∏–∑ –æ—Ç–≤–µ—Ç–∞<br>
                                3. –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–æ–ª–µ –≤—ã—à–µ (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ "Bearer")<br>
                                4. –ù–∞–∂–º–∏—Ç–µ "Authorize"<br><br>
                                <strong>üîç –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ login:</strong><br>
                                <code>{"accessToken": "eyJhbGci...", "refreshToken": "...", "user": {...}}</code>
                            </div>
                        `;
                        
                        const descriptionDiv = authContainer.querySelector('.auth-container-description');
                        if (descriptionDiv) {
                            descriptionDiv.parentNode.insertBefore(tokenInfo, descriptionDiv.nextSibling);
                        }
                    }
                }
            });
        });
        
        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    function enhanceAuthErrors() {
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.type === 'childList') {
                    // –ò—â–µ–º –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    const errorElements = document.querySelectorAll('.errors-wrapper');
                    errorElements.forEach(function(errorEl) {
                        if (!errorEl.hasAttribute('data-enhanced')) {
                            errorEl.setAttribute('data-enhanced', 'true');
                            errorEl.style.backgroundColor = '#f8d7da';
                            errorEl.style.border = '1px solid #f5c6cb';
                            errorEl.style.borderRadius = '4px';
                            errorEl.style.padding = '10px';
                            errorEl.style.marginTop = '10px';
                        }
                    });
                }
            });
        });
        
        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    function addQuickActions() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ login
        const info = document.querySelector('.info');
        if (info && !info.querySelector('.quick-actions')) {
            const quickActions = document.createElement('div');
            quickActions.className = 'quick-actions';
            quickActions.innerHTML = `
                <div style="background-color: #d4edda; border: 1px solid #c3e6cb; border-radius: 4px; padding: 15px; margin: 20px 0;">
                    <h4 style="color: #155724; margin-top: 0;">üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç</h4>
                    <p style="margin-bottom: 10px;">–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π:</p>
                    <ol style="margin-bottom: 15px; padding-left: 20px;">
                        <li>–ù–∞–π–¥–∏—Ç–µ –º–µ—Ç–æ–¥ <strong>POST /auth/login</strong> –Ω–∏–∂–µ</li>
                        <li>–ù–∞–∂–º–∏—Ç–µ "Try it out" –∏ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å</li>
                        <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ <code>accessToken</code> –∏–∑ –æ—Ç–≤–µ—Ç–∞</li>
                        <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <strong>üîí –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è</strong> –≤–≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã</li>
                        <li>–í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –Ω–∞–∂–º–∏—Ç–µ "Authorize"</li>
                    </ol>
                    <button onclick="document.querySelector('[data-path=\\'/auth/login\\']').scrollIntoView({behavior: 'smooth'})" 
                            style="background-color: #007bff; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">
                        üìç –ü–µ—Ä–µ–π—Ç–∏ –∫ /auth/login
                    </button>
                </div>
            `;
            info.appendChild(quickActions);
        }
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è
    setTimeout(function() {
        enhanceAuthUI();
        enhanceTokenInput();
        addTokenInfo();
        enhanceAuthErrors();
        addQuickActions();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        setInterval(enhanceAuthUI, 2000);
    }, 1000);
    
    console.log('JWT Enhancement initialized');
}); 